{"name":"ConfigOptionsDocGenerator.java","path":"paimon-docs/src/main/java/org/apache/paimon/docs/configuration/ConfigOptionsDocGenerator.java","content":{"structured":{"description":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata.","items":[{"id":"056644ca-eb3c-b0bd-d44a-0bfe9efd11b5","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"groups options by section and sorts them based on their position within that section. It then writes the sorted options to a HTML table in a file located in the specified output directory.","params":[{"name":"rootDir","type_name":"String","description":"base directory where the documentation will be generated.","complex_type":false},{"name":"outputDirectory","type_name":"String","description":"directory where the generated HTML table will be written to by the function.","complex_type":false},{"name":"locations","type_name":"OptionsClassLocation[]","description":"0-based index of an OptionsClassLocation object, which contains metadata about a particular option within a module or package, and is used to iterate through all options for each location in the code generation process.\n\n* Each `OptionsClassLocation` object in `locations` represents an annotation on a class or method in a Java module.\n* The `module`, `package`, and `pathPrefix` fields of each `OptionsClassLocation` represent the module, package name, and prefix of the output directory for that location's options, respectively.\n* The `field` field of each `OptionsClassLocation` represents the field on which the annotation is placed. This field is used to determine the section of the documentation to display for each option.\n* The `Annotation` object returned by `getField()` represents the annotation on the field, which can include information such as the documentation section and position within that section.","complex_type":true},{"name":"pathPrefix","type_name":"String","description":"prefix to be added to the output directory for each section's HTML table file name, allowing for customization of the output structure.","complex_type":false}],"name":"generateCommonSection","code":"@VisibleForTesting\n    static void generateCommonSection(\n            String rootDir,\n            String outputDirectory,\n            OptionsClassLocation[] locations,\n            String pathPrefix)\n            throws IOException, ClassNotFoundException {\n        List<OptionWithMetaInfo> allSectionOptions = new ArrayList<>(32);\n        for (OptionsClassLocation location : locations) {\n            allSectionOptions.addAll(\n                    findSectionOptions(\n                            rootDir, location.getModule(), location.getPackage(), pathPrefix));\n        }\n\n        Map<String, List<OptionWithMetaInfo>> optionsGroupedBySection =\n                allSectionOptions.stream()\n                        .flatMap(\n                                option -> {\n                                    final String[] sections =\n                                            option.field\n                                                    .getAnnotation(Documentation.Section.class)\n                                                    .value();\n                                    if (sections.length == 0) {\n                                        throw new RuntimeException(\n                                                String.format(\n                                                        \"Option %s is annotated with %s but the list of sections is empty.\",\n                                                        option.option.key(),\n                                                        Documentation.Section.class\n                                                                .getSimpleName()));\n                                    }\n\n                                    return Arrays.stream(sections)\n                                            .map(section -> Pair.of(section, option));\n                                })\n                        .collect(\n                                Collectors.groupingBy(\n                                        Pair::getLeft,\n                                        Collectors.mapping(Pair::getRight, Collectors.toList())));\n\n        optionsGroupedBySection.forEach(\n                (section, options) -> {\n                    options.sort(\n                            (o1, o2) -> {\n                                int position1 =\n                                        o1.field\n                                                .getAnnotation(Documentation.Section.class)\n                                                .position();\n                                int position2 =\n                                        o2.field\n                                                .getAnnotation(Documentation.Section.class)\n                                                .position();\n                                if (position1 == position2) {\n                                    return o1.option.key().compareTo(o2.option.key());\n                                } else {\n                                    return Integer.compare(position1, position2);\n                                }\n                            });\n\n                    String sectionHtmlTable = toHtmlTable(options);\n                    try {\n                        Files.write(\n                                Paths.get(outputDirectory, getSectionFileName(section)),\n                                (apacheHeaderToHtml() + sectionHtmlTable)\n                                        .getBytes(StandardCharsets.UTF_8));\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                });\n    }","location":{"start":133,"insert":133,"offset":" ","indent":4,"comment":null},"item_type":"method","length":69,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"e744acf7-a648-3ebc-6f45-1852bfbe92b9","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"generates a section file name based on the inputted section string, appending an underscore and the word \"section\" to produce the final file name.","params":[{"name":"section","type_name":"String","description":"name of the section for which the file name is to be generated.","complex_type":false}],"returns":{"type_name":"String","description":"a string representing the file name for a specific section, constructed by combining the section name with the suffix \"_section.html\".","complex_type":false},"name":"getSectionFileName","code":"@VisibleForTesting\n    static String getSectionFileName(String section) {\n        return section + \"_section.html\";\n    }","location":{"start":203,"insert":203,"offset":" ","indent":4,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"af596a7d-9317-7dbf-2d4a-5d8f222d13d9","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"finds all option with meta-info within a given package and sub-package, based on documentation annotations.","params":[{"name":"rootDir","type_name":"String","description":"directory where configuration files are located.","complex_type":false},{"name":"module","type_name":"String","description":"module name for which options are to be found.","complex_type":false},{"name":"packageName","type_name":"String","description":"package name of the module being searched for options.","complex_type":false},{"name":"pathPrefix","type_name":"String","description":"prefix for the path of the options files to be processed, which is used to filter the options based on their paths.","complex_type":false}],"returns":{"type_name":"CollectionOptionWithMetaInfo","description":"a collection of `OptionWithMetaInfo` objects that represent configuration options with documentation for a specified module, package name, and path prefix.\n\n* The Collection is of type `OptionWithMetaInfo`.\n* It contains options that have a field annotated with `@Documentation.Section`.\n* The options are filtered based on the value of the `pathPrefix` parameter.\n* The list of options is processed using the `processConfigOptions` method, which takes the root directory, module name, package name, and option class as parameters.","complex_type":true},"name":"findSectionOptions","code":"private static Collection<OptionWithMetaInfo> findSectionOptions(\n            String rootDir, String module, String packageName, String pathPrefix)\n            throws IOException, ClassNotFoundException {\n        Collection<OptionWithMetaInfo> commonOptions = new ArrayList<>(32);\n        processConfigOptions(\n                rootDir,\n                module,\n                packageName,\n                pathPrefix,\n                optionsClass ->\n                        extractConfigOptions(optionsClass).stream()\n                                .filter(\n                                        optionWithMetaInfo ->\n                                                optionWithMetaInfo.field.getAnnotation(\n                                                                Documentation.Section.class)\n                                                        != null)\n                                .forEachOrdered(commonOptions::add));\n        return commonOptions;\n    }","location":{"start":208,"insert":208,"offset":" ","indent":4,"comment":null},"item_type":"method","length":19,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"786a4e10-8d7e-159d-ba4f-114c35762841","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"generates HTML documentation tables for a given Java class based on its configuration options, and writes them to a specified output directory.","params":[{"name":"rootDir","type_name":"String","description":"directory where the configuration files will be generated.","complex_type":false},{"name":"module","type_name":"String","description":"module name for which the configuration options are being generated.","complex_type":false},{"name":"packageName","type_name":"String","description":"name of the package to which the generated configuration files will belong, and is used to construct the output file names in the `toSnakeCase()` method.","complex_type":false},{"name":"outputDirectory","type_name":"String","description":"directory where the generated HTML files will be saved.","complex_type":false}],"name":"createTable","code":"private static void createTable(\n            String rootDir, String module, String packageName, String outputDirectory)\n            throws IOException, ClassNotFoundException {\n        processConfigOptions(\n                rootDir,\n                module,\n                packageName,\n                ConfigOptionsDocGenerator.DEFAULT_PATH_PREFIX,\n                optionsClass -> {\n                    List<Pair<ConfigGroup, String>> tables = generateTablesForClass(optionsClass);\n                    for (Pair<ConfigGroup, String> group : tables) {\n                        String name;\n                        if (group.getLeft() == null) {\n                            Matcher matcher =\n                                    CLASS_NAME_PATTERN.matcher(optionsClass.getSimpleName());\n                            if (!matcher.matches()) {\n                                throw new RuntimeException(\n                                        \"Pattern did not match for \"\n                                                + optionsClass.getSimpleName()\n                                                + '.');\n                            }\n                            name = matcher.group(CLASS_PREFIX_GROUP);\n                        } else {\n                            name = group.getLeft().name();\n                        }\n                        String outputFile = toSnakeCase(name) + \"_configuration.html\";\n                        Files.write(\n                                Paths.get(outputDirectory, outputFile),\n                                (apacheHeaderToHtml() + group.getRight())\n                                        .getBytes(StandardCharsets.UTF_8));\n                    }\n                });\n    }","location":{"start":228,"insert":228,"offset":" ","indent":4,"comment":null},"item_type":"method","length":33,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"5d896002-0511-abad-714d-e490b6e1c522","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"converts a given string to lowercase and replaces any letter followed by an uppercase letter with an underscore and the corresponding lowercase letter, resulting in a snake case representation of the input string.","params":[{"name":"name","type_name":"String","description":"string to be converted to snake case.","complex_type":false}],"returns":{"type_name":"String","description":"a lowercase string with underscores separating words, obtained by replacing and then removing the first letter of each word followed by an uppercase letter, and then replacing the entire sequence with an underscore.","complex_type":false},"name":"toSnakeCase","code":"@VisibleForTesting\n    static String toSnakeCase(String name) {\n        return name.replaceAll(\"(.)([A-Z][a-z])\", \"$1_$2\").toLowerCase();\n    }","location":{"start":262,"insert":262,"offset":" ","indent":4,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"1c571589-89cc-fdbf-0d47-5842dca0f48a","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"processes a configuration directory containing class files, and passes each class to a consumer for further processing.","params":[{"name":"rootDir","type_name":"String","description":"directory where the configuration files are located.","complex_type":false},{"name":"module","type_name":"String","description":"module name associated with the configuration files to be processed, which is used to determine the directory path for the configuration files.","complex_type":false},{"name":"packageName","type_name":"String","description":"name of the package that contains the classes to be processed, and is used as a prefix for the file names to determine the class names to be processed.","complex_type":false},{"name":"pathPrefix","type_name":"String","description":"subdirectory path within the configuration directory where the classes are searched for in the DirectoryStream.","complex_type":false},{"name":"classConsumer","type_name":"ThrowingConsumer<Class<?>, IOException>","description":"method that takes a class loader and performs some operation on it, such as loading a class from the given path prefix.\n\n* `ThrowingConsumer<Class<?>, IOException>`: This is a type-safe consumer that takes a class as an input and can throw an `IOException`.\n* `Class<?>`: The type of the class being consumed.\n* `IOException`: The exception type that can be thrown by the consumer.\n* `Path`: The path to the configuration file being processed.\n\nThe function takes these properties as inputs and performs operations on them, such as reading from a directory stream and passing the classes to the consumer for processing.","complex_type":true}],"name":"processConfigOptions","code":"@VisibleForTesting\n    static void processConfigOptions(\n            String rootDir,\n            String module,\n            String packageName,\n            String pathPrefix,\n            ThrowingConsumer<Class<?>, IOException> classConsumer)\n            throws IOException, ClassNotFoundException {\n        Path configDir = Paths.get(rootDir, module, pathPrefix, packageName.replaceAll(\"\\\\.\", \"/\"));\n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(configDir)) {\n            for (Path entry : stream) {\n                String fileName = entry.getFileName().toString();\n                Matcher matcher = CLASS_NAME_PATTERN.matcher(fileName);\n                if (matcher.matches()) {\n                    classConsumer.accept(\n                            Class.forName(packageName + '.' + matcher.group(CLASS_NAME_GROUP)));\n                }\n            }\n        }\n    }","location":{"start":267,"insert":267,"offset":" ","indent":4,"comment":null},"item_type":"method","length":20,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"8b0a4f53-87bb-3598-1b4a-57e933073b90","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"generates HTML tables representing configuration options for a given class, based on annotations and extracted options. It returns a list of pairs consisting of a ConfigGroup and its corresponding table.","params":[{"name":"optionsClass","type_name":"Class<?>","description":"class that contains the configuration options to be extracted and summarized.\n\n* `ConfigGroups`: This is an annotation on the class that provides information about the configuration groups defined in the class. The `groups()` method returns a list of configuration group names.\n* `allOptions`: This is a list of `OptionWithMetaInfo` objects that represent all the configuration options available for the class.\n* `configGroups`: If this is not null, it indicates that there are defined configuration groups in the class, and the function creates tables for each group separately. The `groups()` method returns a list of configuration group names.\n* `tree`: This is an instance of the `Tree` class, which represents the hierarchy of configuration options based on their grouping. The `findConfigOptions()` method finds all the configuration options that belong to a given configuration group.\n* `sortOptions`: This is a method that sorts the configuration options in each group alphabetically.\n* `toHtmlTable`: This is a method that converts the sorted list of configuration options into an HTML table.","complex_type":true}],"returns":{"type_name":"List","description":"a list of pairs containing a ConfigGroup and its corresponding HTML table representation.\n\n* `tables`: A list of pairs containing the ConfigGroup and the corresponding HTML table for each option in the class. If the ConfigGroups annotation is present, the list will have length equal to the number of ConfigGroups, followed by a single entry with null as the ConfigGroup and the HTML table for the default options. Otherwise, the list will have only one entry with null as the ConfigGroup and the HTML table for all options.\n* `Pair`: The type of the elements in the `tables` list, which are pairs containing the ConfigGroup and the HTML table for each option.","complex_type":true},"name":"generateTablesForClass","code":"@VisibleForTesting\n    static List<Pair<ConfigGroup, String>> generateTablesForClass(Class<?> optionsClass) {\n        ConfigGroups configGroups = optionsClass.getAnnotation(ConfigGroups.class);\n        List<OptionWithMetaInfo> allOptions = extractConfigOptions(optionsClass);\n        if (allOptions.isEmpty()) {\n            return Collections.emptyList();\n        }\n        List<Pair<ConfigGroup, String>> tables;\n        if (configGroups != null) {\n            tables = new ArrayList<>(configGroups.groups().length + 1);\n            Tree tree = new Tree(configGroups.groups(), allOptions);\n            for (ConfigGroup group : configGroups.groups()) {\n                List<OptionWithMetaInfo> configOptions = tree.findConfigOptions(group);\n                if (!configOptions.isEmpty()) {\n                    sortOptions(configOptions);\n                    tables.add(Pair.of(group, toHtmlTable(configOptions)));\n                }\n            }\n            List<OptionWithMetaInfo> configOptions = tree.getDefaultOptions();\n            if (!configOptions.isEmpty()) {\n                sortOptions(configOptions);\n                tables.add(Pair.of(null, toHtmlTable(configOptions)));\n            }\n        } else {\n            sortOptions(allOptions);\n            tables = Collections.singletonList(Pair.of(null, toHtmlTable(allOptions)));\n        }\n        return tables;\n    }","location":{"start":288,"insert":288,"offset":" ","indent":4,"comment":null},"item_type":"method","length":29,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"dbd2897e-a402-b68c-c14d-04939735a9eb","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"extracts configuration options from a given class by iterating through its fields, checking if they are config options and should be documented, and adding them to a list.","params":[{"name":"clazz","type_name":"Class<?>","description":"Class object for which config options are to be extracted.\n\n* `clazz`: The class to be analyzed for config options.\n* `fields`: An array of fields within the `clazz`.\n* `isConfigOption`: A method that determines whether a field is a config option or not.\n* `shouldBeDocumented`: Another method that decides if a field should be documented or not.\n\nThe function then iterates through each field in the `fields` array and applies the `isConfigOption` and `shouldBeDocumented` methods to determine which fields are config options and should be included in the list of config options. The resulting list of config options is returned at the end of the function.","complex_type":true}],"returns":{"type_name":"ArrayList","description":"a list of `OptionWithMetaInfo` objects representing configured fields in a class.\n\n* The list of config options is generated using the `getFields` method of the class, which returns a list of all fields in the class.\n* Each field is checked if it is a `ConfigOption` object using the `isConfigOption` method. If it is, the field's value is obtained using the `get(null)` method, and the resulting `OptionWithMetaInfo` object is added to the list of config options.\n* The `shouldBeDocumented` method is called on each field to determine if it should be documented. If the method returns `true`, the field is included in the list of config options.\n* The list of config options returned by the function is a list of `OptionWithMetaInfo` objects, where each object represents a single config option with its associated metadata.","complex_type":true},"name":"extractConfigOptions","code":"@VisibleForTesting\n    static List<OptionWithMetaInfo> extractConfigOptions(Class<?> clazz) {\n        try {\n            List<OptionWithMetaInfo> configOptions = new ArrayList<>(8);\n            Field[] fields = clazz.getFields();\n            for (Field field : fields) {\n                if (isConfigOption(field) && shouldBeDocumented(field)) {\n                    configOptions.add(\n                            new OptionWithMetaInfo((ConfigOption<?>) field.get(null), field));\n                }\n            }\n            return configOptions;\n        } catch (Exception e) {\n            throw new RuntimeException(\n                    \"Failed to extract config options from class \" + clazz + '.', e);\n        }\n    }","location":{"start":318,"insert":318,"offset":" ","indent":4,"comment":null},"item_type":"method","length":17,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"71a2b9e1-7695-1f9e-3448-0fbbadee5cd9","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"determines if a given Field represents a ConfigOption type. It returns `true` if the Field's type is equal to `ConfigOption.class`, and `false` otherwise.","params":[{"name":"field","type_name":"Field","description":"Field object to be checked for being a ConfigOption, allowing the function to determine if it is a ConfigOption or not.\n\n* The type of the field is checked to be equal to `ConfigOption.class`, indicating that it represents a configuration option.\n* The field itself is not modified or altered in any way, as its original state is returned.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a `boolean` value indicating whether the provided `Field` represents a `ConfigOption` type.\n\nThe function returns a boolean value indicating whether the given `Field` object represents a `ConfigOption` class.\n\nThe `Field` object passed as an argument is checked for type equality with `ConfigOption.class`. If the types match, the function returns `true`, otherwise it returns `false`.\n\nNo information about the code author or licensing is provided in the output.","complex_type":true},"name":"isConfigOption","code":"private static boolean isConfigOption(Field field) {\n        return field.getType().equals(ConfigOption.class);\n    }","location":{"start":336,"insert":336,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"7fce4261-9611-7cac-0f45-62b3de780538","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"determines whether a `Field` object should be documented based on the absence of certain annotations.","params":[{"name":"field","type_name":"Field","description":"Field object to be evaluated for documentation purposes.\n\n* The return value is determined by evaluating two nullability expressions against the field's annotations.\n* `Deprecated.class` and `Documentation.ExcludeFromDocumentation.class` are checked for the presence of annotations on the field. If either is present, the method returns `false`.\n* If both annotations are absent, the method returns `true`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the given Field should be documented or not, based on the absence of certain annotations.","complex_type":false},"name":"shouldBeDocumented","code":"private static boolean shouldBeDocumented(Field field) {\n        return field.getAnnotation(Deprecated.class) == null\n                && field.getAnnotation(Documentation.ExcludeFromDocumentation.class) == null;\n    }","location":{"start":340,"insert":340,"offset":" ","indent":4,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"6e594884-046b-7d89-1945-4a50ab6823fd","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"generates a summary of an option's description and any additional enum options descriptions, formatted according to a provided formatter.","params":[{"name":"optionWithMetaInfo","type_name":"OptionWithMetaInfo","description":"Option object with additional metadata, providing the option's description and any optional enum options descriptions to be formatted and concatenated for display.\n\n* `option`: A reference to an `Option` object, which contains information about a particular option in the application.\n* `metaInfo`: An object that contains metadata related to the option, such as its name, description, and any relevant tags or categories.\n* `formatter`: A formatting object used to format the output of the function.\n* `getEnumOptionsDescription`: A function that retrieves a list of descriptive strings for any enum options associated with the `option`. If no enum options are present, the function returns an empty list.","complex_type":true}],"returns":{"type_name":"String","description":"a string consisting of the option's description followed by any additional enum options descriptions.","complex_type":false},"name":"getDescription","code":"@VisibleForTesting\n    static String getDescription(OptionWithMetaInfo optionWithMetaInfo) {\n        return formatter.format(optionWithMetaInfo.option.description())\n                + Optional.ofNullable(getEnumOptionsDescription(optionWithMetaInfo))\n                        .map(formatter::format)\n                        .map(desc -> String.format(\"<br /><br />%s\", desc))\n                        .orElse(\"\");\n    }","location":{"start":397,"insert":397,"offset":" ","indent":4,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"0769ad5a-ec18-0b8c-b943-f346a66fe563","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"retrieves the Class object associated with a given ConfigOption.","params":[{"name":"option","type_name":"ConfigOption<?>","description":"ConfigOption object that contains the configuration value to be retrieved as a Class object.\n\nThe method takes an instance of `ConfigOption`, which is defined in the class `ConfigOption`. This class has various attributes and methods that can be used to manipulate and analyze its properties.\n\nOne important attribute of `ConfigOption` is its `getClazz` method, which returns a `Class<?>` object representing the class of the option value. This method is declared as a `declaredMethod` in the `ConfigOption` class and can be invoked using reflection.\n\nThe `getClazzMethod` instance is created by calling `getDeclaredMethod` on the `ConfigOption` class, followed by setting its accessibility to `true`. The method invocation is performed by passing the `option` argument to the `getClazzMethod`, followed by setting its accessibility back to `false`. Finally, the returned `Class<?>` object is returned from the method.","complex_type":true}],"returns":{"type_name":"Class","description":"a `Class` object representing the class of the specified configuration option.\n\n* The output is a `Class` object representing the class of the option value.\n* The class is retrieved through the `Method.invoke()` method, which allows for accessing and manipulating the fields and methods of an object.\n* The `setAccessible()` method is used to enable or disable the accessibility of the `Method`, depending on the context in which it is being called.","complex_type":true},"name":"getClazz","code":"private static Class<?> getClazz(ConfigOption<?> option) {\n        try {\n            Method getClazzMethod = ConfigOption.class.getDeclaredMethod(\"getClazz\");\n            getClazzMethod.setAccessible(true);\n            Class<?> clazz = (Class<?>) getClazzMethod.invoke(option);\n            getClazzMethod.setAccessible(false);\n            return clazz;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","location":{"start":442,"insert":442,"offset":" ","indent":4,"comment":null},"item_type":"method","length":11,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"fa44060e-ad6e-7daf-cf4a-468264322861","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"takes an `OptionWithMetaInfo` object as input and returns a string representing the type of the option as HTML. Depending on the type of the option, it calls the appropriate helper function to generate the HTML representation.","params":[{"name":"optionWithMetaInfo","type_name":"OptionWithMetaInfo","description":"option and its metadata, which includes the class type of the option.\n\n* `option`: This is an instance of `ConfigOption<?>`, which represents an option with metadata in the given configuration.\n* `clazz`: The class of the option type, obtained through reflection.\n\nThe function then checks if the option type is an enum, and if so, it calls the `enumTypeToHtml` function to generate the HTML representation of the option. Otherwise, it calls the `atomicTypeToHtml` function to generate the HTML representation of the option's class.","complex_type":true}],"returns":{"type_name":"atomicType","description":"a string representing the HTML type of the given option or class.\n\n* If the input `optionWithMetaInfo` is an enum, the function returns the result of calling `enumTypeToHtml()`.\n* Otherwise, the function calls `atomicTypeToHtml()` and passes the class of the option as its argument.\n\nThe `typeToHtml` function takes a `ConfigOption<?>` object as input and returns a string representing the type of the option. The output depends on whether the input is an enum or not. If it's an enum, the function calls `enumTypeToHtml()` to generate the HTML representation of the enum values. Otherwise, it calls `atomicTypeToHtml()` to generate the HTML representation of the class of the option.","complex_type":true},"name":"typeToHtml","code":"@VisibleForTesting\n    static String typeToHtml(OptionWithMetaInfo optionWithMetaInfo) {\n        ConfigOption<?> option = optionWithMetaInfo.option;\n        Class<?> clazz = getClazz(option);\n        if (clazz.isEnum()) {\n            return enumTypeToHtml();\n        }\n        return atomicTypeToHtml(clazz);\n    }","location":{"start":454,"insert":454,"offset":" ","indent":4,"comment":null},"item_type":"method","length":9,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"01d1b83d-87f7-96b2-3a4d-d0f5403af163","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"transforms a given class type into an HTML-escaped string representation.","params":[{"name":"clazz","type_name":"Class<?>","description":"Class object to be converted to an HTML string.\n\n* `clazz`: A `Class` object representing the type to convert to HTML.\n* `getSimpleName()`: This method returns a string representation of the class, which is then escaped and returned as the final output.","complex_type":true}],"returns":{"type_name":"String","description":"a HTML-escaped string representation of the given class name.","complex_type":false},"name":"atomicTypeToHtml","code":"private static String atomicTypeToHtml(Class<?> clazz) {\n        return escapeCharacters(clazz.getSimpleName());\n    }","location":{"start":464,"insert":464,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"dd6040d6-0de8-139d-7c48-4a3aebfd2ddc","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"formats a string representation of an enum type as a HTML paragraph tag, using a specified formatting pattern.","params":[],"returns":{"type_name":"String","description":"a HTML paragraph containing the text \"Enum\".","complex_type":false},"name":"enumTypeToHtml","code":"private static String enumTypeToHtml() {\n        return String.format(\"<p>%s</p>\", escapeCharacters(\"Enum\"));\n    }","location":{"start":468,"insert":468,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"f13dd1cc-1aa7-5283-1a46-e6a1fb394da7","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"takes an `OptionWithMetaInfo` object and returns the default value of its option field, either by checking for an `Documentation.OverrideDefault` annotation or by calling the option's `defaultValue()` method.","params":[{"name":"optionWithMetaInfo","type_name":"OptionWithMetaInfo","description":"ConfigOption<?> option with additional metadata, including the Documentation.OverrideDefault annotation and the field's default value.\n\n* `option`: The ConfigOption object that represents a configuration option in the application.\n* `field`: A reference to the field in the configuration class where the option is defined.\n* `annotation`: An annotation on the field that contains information about default values, documentation, and other metadata.\n* `overrideDocumentedDefault`: An annotation on the field that indicates whether the default value should be overridden based on the documentation. If present, it provides the value to be used as the default.","complex_type":true}],"returns":{"type_name":"Object","description":"a string representation of the default value of an option or object.\n\n* The first part of the output is the ConfigOption<?> object, which represents the option being processed.\n* The second part of the output is the Documentation.OverrideDefault annotation, which specifies whether the default value of the option has been overridden or not. If the annotation is present, it indicates that the default value has been overridden; otherwise, it is absent.\n* If the overrideDocumentedDefault annotation is absent, the third part of the output is the default value of the option, which can be any valid value type (e.g., int, boolean, etc.).\n* The final part of the output is the string representation of the default value, which is generated using the `stringifyObject` function. This function takes an object and returns a string representation of it in a standardized format.","complex_type":true},"name":"stringifyDefault","code":"@VisibleForTesting\n    static String stringifyDefault(OptionWithMetaInfo optionWithMetaInfo) {\n        ConfigOption<?> option = optionWithMetaInfo.option;\n        Documentation.OverrideDefault overrideDocumentedDefault =\n                optionWithMetaInfo.field.getAnnotation(Documentation.OverrideDefault.class);\n        if (overrideDocumentedDefault != null) {\n            return overrideDocumentedDefault.value();\n        } else {\n            Object value = option.defaultValue();\n            return stringifyObject(value);\n        }\n    }","location":{"start":472,"insert":472,"offset":" ","indent":4,"comment":null},"item_type":"method","length":12,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"12dda881-e097-93ad-c446-5ac1a68cf200","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"takes an object and returns a string representation of it, depending on its type: string, duration, list or map. If the input is null, it returns \"none\". Otherwise, it converts the object to a string using appropriate methods.","params":[{"name":"value","type_name":"Object","description":"object to be converted to a string, and the function returns a string representation of that object based on its type.\n\n* If `value` is an instance of `String`, then the string value is returned in double quotes. An empty string is returned as \"none\".\n* If `value` is an instance of `Duration`, then it is formatted using `TimeUtils.formatWithHighestUnit()`.\n* If `value` is an instance of `List`, then each element of the list is deserialized using `stringifyObject`. The elements are joined using the `collect()` method with an empty string delimiter.\n* If `value` is an instance of `Map`, then each key-value pair of the map is deserialized using `stringifyObject`. The keys and values are joined using the `collect()` method with a comma delimiter.\n* If `value` is `null`, then \"none\" is returned.","complex_type":true}],"returns":{"type_name":"String","description":"a string representation of an object, depending on its type, which includes:\n\n* A literal string if the input is a `String`.\n* A formatted duration string if the input is a `Duration`.\n* A list of strings separated by a semicolon if the input is a `List`.\n* A map of keys and values separated by a comma if the input is a `Map`.\n* None if the input is null.","complex_type":false},"name":"stringifyObject","code":"@SuppressWarnings(\"unchecked\")\n    private static String stringifyObject(Object value) {\n        if (value instanceof String) {\n            if (((String) value).isEmpty()) {\n                return \"(none)\";\n            }\n            return \"\\\"\" + value + \"\\\"\";\n        } else if (value instanceof Duration) {\n            return TimeUtils.formatWithHighestUnit((Duration) value);\n        } else if (value instanceof List) {\n            return ((List<Object>) value)\n                    .stream()\n                            .map(ConfigOptionsDocGenerator::stringifyObject)\n                            .collect(Collectors.joining(\";\"));\n        } else if (value instanceof Map) {\n            return ((Map<String, String>) value)\n                    .entrySet().stream()\n                            .map(e -> String.format(\"%s:%s\", e.getKey(), e.getValue()))\n                            .collect(Collectors.joining(\",\"));\n        }\n        return value == null ? \"(none)\" : value.toString();\n    }","location":{"start":485,"insert":485,"offset":" ","indent":4,"comment":null},"item_type":"method","length":22,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"223fade6-ee6b-e08d-ff41-9fa840f39005","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"modifies a given string by replacing semicolons with semicolons followed by a hidden break tag, allowing for easier word breaking in certain situations.","params":[{"name":"value","type_name":"String","description":"string to be modified, which is replaced with a modified version that allows breaking of semicolon-separated lists using the `<wbr>` tag.","complex_type":false}],"returns":{"type_name":"String","description":"a modified version of the input string that allows for breaking of semicolon-separated lists using HTML breaks.","complex_type":false},"name":"addWordBreakOpportunities","code":"private static String addWordBreakOpportunities(String value) {\n        return value\n                // allow breaking of semicolon separated lists\n                .replace(\";\", \";<wbr>\");\n    }","location":{"start":508,"insert":508,"offset":" ","indent":4,"comment":null},"item_type":"method","length":5,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"bfa975a1-cea6-e5aa-844e-dc9dfd4afa1e","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"sorts a list of `OptionWithMetaInfo` objects based on the value of their `option.key()` attributes using the `Comparator.comparing()` method.","params":[{"name":"configOptions","type_name":"List<OptionWithMetaInfo>","description":"list of options that need to be sorted.\n\n* `List<OptionWithMetaInfo>` represents a collection of objects comprising options with metadata.\n* Each `OptionWithMetaInfo` object contains an `option` field and a `metaInfo` field, which provide information about the option and its associated metadata, respectively.\n* The `Comparator` used in the `sort` method is defined as `Comparator.comparing(option -> option.option.key())`, which compares each option based on its key value.","complex_type":true}],"name":"sortOptions","code":"private static void sortOptions(List<OptionWithMetaInfo> configOptions) {\n        configOptions.sort(Comparator.comparing(option -> option.option.key()));\n    }","location":{"start":514,"insert":514,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"fc486fab-4bd9-fd9b-384f-f6a22101f59f","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40"],"type":"function","description":"retrieves a list of configuration options for a given `ConfigGroup`. It first finds the root node of the group using the provided prefix, then returns the list of options associated with that node.","params":[{"name":"configGroup","type_name":"ConfigGroup","description":"configuration group for which the options are to be found.\n\n* `keyPrefix`: The key prefix for which the options are being searched.\n* `Node`: A reference to the root node of a group in the configuration data structure.","complex_type":true}],"returns":{"type_name":"ListOptionWithMetaInfo","description":"a list of `OptionWithMetaInfo` instances representing the configuration options for a given `ConfigGroup`.\n\n* `List<OptionWithMetaInfo>` represents a list of configuration options with metadata.\n* `Node` is a class that stores the configuration information and its associated metadata.\n* `groupRoot` is an instance of `Node` representing the root node of the configuration group specified by `configGroup.keyPrefix()`.\n* `getConfigOptions()` returns a list of configuration options associated with the group root node.","complex_type":true},"usage":{"language":"java","code":"// The ConfigGroup with the longest key prefix in this case 'configGroup' \nConfigGroup configGroup = new ConfigGroup(\"configGroup\");\n// Finds all options that belong to the group 'configGroup' and assigns them to a list.\nList<OptionWithMetaInfo> optionList = findConfigOptions(configGroup);\n","description":"\nThis example shows how you can pass in a ConfigGroup object with a key prefix, which will find all of the options belonging to that ConfigGroup and assigns them to an OptionWithMetaInfo List."},"name":"findConfigOptions","code":"List<OptionWithMetaInfo> findConfigOptions(ConfigGroup configGroup) {\n            Node groupRoot = findGroupRoot(configGroup.keyPrefix());\n            return groupRoot.getConfigOptions();\n        }","location":{"start":543,"insert":543,"offset":" ","indent":8,"comment":null},"item_type":"method","length":4,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"4e26a596-da16-c4bc-b044-1696d8e1f13a","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40"],"type":"function","description":"returns a list of `OptionWithMetaInfo` objects representing the default configuration options for a Root object.","params":[],"returns":{"type_name":"ListOptionWithMetaInfo","description":"a list of `OptionWithMetaInfo` objects representing the default configuration options for the system.\n\n* The `List<OptionWithMetaInfo>` object represents a list of options with their corresponding metadata.\n* Each option in the list is an `OptionWithMetaInfo` object, which contains the option name and its associated metadata.\n* The metadata includes information about the option's type, description, and any default value it may have.","complex_type":true},"usage":{"language":"java","code":"ConfigGroup[] groups = ConfigGroups.findAll(config.getClass());\nList<OptionWithMetaInfo> defaultConfigOptions = configOptionsDocGenerator.getDefaultOptions(groups);\n","description":"\nThis code creates a list of all configuration options available in the specified class by calling the method findAll from the static class ConfigGroups, which returns an array of all the configuration groups present in the given class. The getDefaultOptions method then assigns these groups to the Tree class instance, and finally returns a list of default options for the configuration object created using the same class as input.\nPlease note that this is only one example of how the getDefaultOptions method could be used, and it may not be the most optimal or efficient way depending on the context in which the code is executed."},"name":"getDefaultOptions","code":"List<OptionWithMetaInfo> getDefaultOptions() {\n            return root.getConfigOptions();\n        }","location":{"start":548,"insert":548,"offset":" ","indent":8,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"dcaa1896-a148-b8b4-6042-cf0f6678eea9","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40"],"type":"function","description":"searches for a group node in a tree-like data structure based on a given key. It recursively traverses the tree, following the key components, and returns the last root node found.","params":[{"name":"key","type_name":"String","description":"path to the group root node, and it is used to find the corresponding group root node in the tree.","complex_type":false}],"returns":{"type_name":"Node","description":"a `Node` object representing the group root.\n\n* `lastRootNode`: The last group root node found in the tree, which is also the final destination of the traversal.\n* `currentNode`: The current node being traversed in the tree.\n* `key`: The key used to traverse the tree and find the group root.\n* `root`: The starting point of the traversal, which is typically the root node of the tree.","complex_type":true},"usage":{"language":"java","code":"ConfigOption<String> option = ConfigOptions.key(\"my.option\").stringType().defaultValue(\"hello\");\nConfigGroup group = new ConfigGroup(option);\nNode root = new Node();\nroot.addChild(option);\nNode lastRootNode = findGroupRoot(\"my.option\", root);\nassertEquals(lastRootNode, root);\n","description":"\nExplanation: The provided code creates a single option and groups it under the key \"my.option\". A root node is then created to store the option and its child nodes. The method findGroupRoot() is called on the root node with the same key as the option, which should return the root node since it contains only one option.\n"},"name":"findGroupRoot","code":"private Node findGroupRoot(String key) {\n            Node lastRootNode = root;\n            Node currentNode = root;\n            for (String keyComponent : key.split(\"\\\\.\")) {\n                final Node childNode = currentNode.getChild(keyComponent);\n                if (childNode == null) {\n                    break;\n                } else {\n                    currentNode = childNode;\n                    if (currentNode.isGroupRoot()) {\n                        lastRootNode = currentNode;\n                    }\n                }\n            }\n            return lastRootNode;\n        }","location":{"start":552,"insert":552,"offset":" ","indent":8,"comment":null},"item_type":"method","length":16,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"0510d799-7a04-f981-8f4b-acb065dc5767","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40"],"type":"function","description":"is used to represent a hierarchical structure of ConfigOptions and their relationships. It has a list of OptionWithMetaInfo objects representing the ConfigOptions and a map of child nodes. The Node class also provides methods for adding and retrieving children, as well as marking a node as a group root.","name":"Node","code":"private static class Node {\n            private final List<OptionWithMetaInfo> configOptions = new ArrayList<>(8);\n            private final Map<String, Node> children = new HashMap<>(8);\n            private boolean isGroupRoot = false;\n\n            private Node addChild(String keyComponent) {\n                Node child = children.get(keyComponent);\n                if (child == null) {\n                    child = new Node();\n                    children.put(keyComponent, child);\n                }\n                return child;\n            }\n\n            private Node getChild(String keyComponent) {\n                return children.get(keyComponent);\n            }\n\n            private void assignOption(OptionWithMetaInfo option) {\n                configOptions.add(option);\n            }\n\n            private boolean isGroupRoot() {\n                return isGroupRoot;\n            }\n\n            private void markAsGroupRoot() {\n                this.isGroupRoot = true;\n            }\n\n            private List<OptionWithMetaInfo> getConfigOptions() {\n                return configOptions;\n            }\n        }","location":{"start":569,"insert":569,"offset":" ","indent":8,"comment":null},"item_type":"class","length":34,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"b85e0569-e52c-b183-cb43-c3a552be7ae1","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40","0510d799-7a04-f981-8f4b-acb065dc5767"],"type":"function","description":"adds a new child node to the linked list represented by the `children` map if the key component does not already exist in the map or creates a new node and maps it to the key component if it exists.","params":[{"name":"keyComponent","type_name":"String","description":"component of a node to which a new child node will be added.","complex_type":false}],"returns":{"type_name":"Node","description":"a reference to a newly created `Node` object or the existing `Node` object associated with the given key component.\n\n* The function returns a `Node` object representing a child node in the tree structure.\n* If the key component does not exist in the `children` map, a new `Node` object is created and added to the map with the provided key component as its value.\n* The returned `Node` object contains information about the child node, including its key component and any additional attributes or properties that have been assigned to it.","complex_type":true},"usage":{"language":"java","code":"Node root = new Node();\nroot.addChild(\"key1\");\nNode node = root.getChild(\"key1\");\nnode.addChild(\"key2\");\n","description":"\nThis code creates a tree with one child node under the root, and then adds another child node to that node. The final result is a tree with two nodes: `root` and `node`. The latter has one child node itself, which is accessed using the method getChild and stored in the variable node."},"name":"addChild","code":"private Node addChild(String keyComponent) {\n                Node child = children.get(keyComponent);\n                if (child == null) {\n                    child = new Node();\n                    children.put(keyComponent, child);\n                }\n                return child;\n            }","location":{"start":574,"insert":574,"offset":" ","indent":12,"comment":null},"item_type":"method","length":8,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"c682fc2e-5cab-3298-f04a-0f9cd67ffc46","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40","0510d799-7a04-f981-8f4b-acb065dc5767"],"type":"function","description":"retrieves a child node based on its key component, using a hash table to quickly locate the appropriate node.","params":[{"name":"keyComponent","type_name":"String","description":"component of the node's key that is used to retrieve the corresponding child node from the `children` map.","complex_type":false}],"returns":{"type_name":"Node","description":"a `Node` object representing the child element with the specified key component.\n\nThe function returns a `Node` object, which represents a child node in a tree-like data structure. The `Node` object contains a reference to the child node itself, as well as additional information about the node such as its key component and the `children` map.","complex_type":true},"usage":{"language":"java","code":"Node root = new Node();\nNode child = root.getChild(\"keyComponent\");\n","description":"\nIn this case, the key component being looked up in the map of children is \"keyComponent\". The value of the given key is returned if it exists, or null otherwise. In this example, we have a node named \"root\" and a child with the key \"keyComponent\". We can then retrieve that child using the method getChild on our root node."},"name":"getChild","code":"private Node getChild(String keyComponent) {\n                return children.get(keyComponent);\n            }","location":{"start":583,"insert":583,"offset":" ","indent":12,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"5245c632-b020-fba6-264e-a4e45bddae7a","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40","0510d799-7a04-f981-8f4b-acb065dc5767"],"type":"function","description":"adds an `OptionWithMetaInfo` object to a `List` called `configOptions`.","params":[{"name":"option","type_name":"OptionWithMetaInfo","description":"OptionWithMetaInfo object that is being added to the `configOptions` list.\n\n* `configOptions`: A list of `OptionWithMetaInfo` objects that can be manipulated or modified.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n    ConfigOptionsDocGenerator test = new ConfigOptionsDocGenerator();\n    OptionWithMetaInfo option = new OptionWithMetaInfo(\"option\", \"field\");\n    test.assignOption(option);\n}\n","description":"\nThis is a basic example that should be sufficient to test the correct functionality of the method. It creates an instance of the class and calls the assignOption method with an object of type OptionWithMetaInfo. The main method would be used in a unit test to test this specific code path."},"name":"assignOption","code":"private void assignOption(OptionWithMetaInfo option) {\n                configOptions.add(option);\n            }","location":{"start":587,"insert":587,"offset":" ","indent":12,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"5e9ed43f-a6d0-cba6-bc4d-c5c5870beb0b","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40","0510d799-7a04-f981-8f4b-acb065dc5767"],"type":"function","description":"determines whether a given group is a root group or not.","params":[],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the current group is a root group or not.","complex_type":false},"usage":{"language":"java","code":"// Assuming we have a class Node with methods addChild, getChild, and markAsGroupRoot\n\nNode root = new Node(); // This node will hold the entire tree structure\nNode currentNode = root; // This variable will keep track of the last node added to the tree\nfor (String keyComponent : \"flink.foo.bar\".split(\"\\\\.\")) {\n    currentNode = currentNode.addChild(keyComponent); // Add a new child to the current node for each component of the key\n}\ncurrentNode.markAsGroupRoot(); // Mark the last child added as a group root, indicating it represents a config option with the longest matching prefix among all options\n","description":"\nIn this example, we create a tree structure using the method addChild and mark the last child added as a group root by calling the method markAsGroupRoot. The variable currentNode will keep track of the last node added to the tree. The string \"flink.foo.bar\" is split into its components (using the regular expression \"\\.\") and each component is used to add a new child to the current node."},"name":"isGroupRoot","code":"private boolean isGroupRoot() {\n                return isGroupRoot;\n            }","location":{"start":591,"insert":591,"offset":" ","indent":12,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"27f02d1a-470e-e09c-1d43-d2e3b6937df6","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40","0510d799-7a04-f981-8f4b-acb065dc5767"],"type":"function","description":"sets the object's `isGroupRoot` field to `true`, indicating that it is a group root.","params":[],"usage":{"language":"java","code":"private void markAsGroupRoot() {\n    this.isGroupRoot = true;\n}\n","description":"\nIn this example, the method is called on the current node of a tree which marks it as the root of its corresponding group. This allows for options within that group to be identified and assigned."},"name":"markAsGroupRoot","code":"private void markAsGroupRoot() {\n                this.isGroupRoot = true;\n            }","location":{"start":595,"insert":595,"offset":" ","indent":12,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"47275a15-9f44-3eab-3c41-a8f4dd86b5ef","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9","90f17d34-458e-6d99-484e-656e7b849f40","0510d799-7a04-f981-8f4b-acb065dc5767"],"type":"function","description":"retrieves a list of configuration options and returns it.","params":[],"returns":{"type_name":"List","description":"a list of `OptionWithMetaInfo` objects.\n\nThe List<OptionWithMetaInfo> returned is a collection of configuration options with metadata. Each option is represented by an OptionWithMetaInfo object that contains information about the option, such as its name, description, and default value. The List provides a convenient way to access and manipulate the configuration options.","complex_type":true},"usage":{"language":"java","code":"List<OptionWithMetaInfo> options = config.getConfigOptions();\nfor (OptionWithMetaInfo option : options) {\n    System.out.println(\"Option: \" + option.option.key() + \"\\n\");\n}\n","description":"\nThis example shows the usage of method getConfigOptions which returns all ConfigOptions in a list of OptionWithMetaInfo objects, and then iterates over each option in the list to print out the key for each option."},"name":"getConfigOptions","code":"private List<OptionWithMetaInfo> getConfigOptions() {\n                return configOptions;\n            }","location":{"start":599,"insert":599,"offset":" ","indent":12,"comment":null},"item_type":"method","length":3,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."},{"id":"96f2ffb7-ec12-49a5-bc41-c07e36947093","ancestors":["3ae40401-c1fa-608d-3a4e-737e8f618fd9"],"type":"function","description":"provides a representation of an option with metadata, including the option and the field associated with it.\nFields:\n\t- option (ConfigOption<?>): in OptionWithMetaInfo represents an option provided by a ConfigOption, along with its corresponding field within a Class object.\n\t- field (Field): in OptionWithMetaInfo represents an instance of Field from Java.\n\n","fields":[{"name":"option","type_name":"ConfigOption<?>","value":null,"constant":false,"class_name":"OptionWithMetaInfo","description":"in OptionWithMetaInfo represents an option provided by a ConfigOption, along with its corresponding field within a Class object."},{"name":"field","type_name":"Field","value":null,"constant":false,"class_name":"OptionWithMetaInfo","description":"in OptionWithMetaInfo represents an instance of Field from Java."}],"name":"OptionWithMetaInfo","code":"static class OptionWithMetaInfo {\n        final ConfigOption<?> option;\n        final Field field;\n\n        public OptionWithMetaInfo(ConfigOption<?> option, Field field) {\n            this.option = option;\n            this.field = field;\n        }\n    }","location":{"start":605,"insert":605,"offset":" ","indent":4,"comment":null},"item_type":"class","length":9,"docLength":null,"doc":"A ConfigOptionsDocGenerator class that generates documentation for Java configuration options. It uses a tree data structure to group and sort configuration options based on their key prefixes, and it provides methods to find default options, get default options, and assign options to corresponding groups. Additionally, the code defines a Node class to represent nodes in the tree data structure and an OptionWithMetaInfo class to represent a configuration option with its associated field metadata."}]}}}